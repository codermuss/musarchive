// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: post_categories.sql

package db

import (
	"context"
)

const deletePostCategory = `-- name: DeletePostCategory :exec
DELETE FROM post_categories 
WHERE post_id = $1 AND category_id = $2
`

type DeletePostCategoryParams struct {
	PostID     int32 `json:"post_id"`
	CategoryID int32 `json:"category_id"`
}

func (q *Queries) DeletePostCategory(ctx context.Context, arg DeletePostCategoryParams) error {
	_, err := q.db.Exec(ctx, deletePostCategory, arg.PostID, arg.CategoryID)
	return err
}

const getCategoriesForPost = `-- name: GetCategoriesForPost :many
SELECT c.id, c.name 
FROM categories c
JOIN post_categories bc ON bc.category_id = c.id
WHERE bc.post_id = $1
`

func (q *Queries) GetCategoriesForPost(ctx context.Context, postID int32) ([]Category, error) {
	rows, err := q.db.Query(ctx, getCategoriesForPost, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertPostCategory = `-- name: InsertPostCategory :one
INSERT INTO post_categories (post_id, category_id) 
VALUES ($1, $2)
RETURNING post_id, category_id
`

type InsertPostCategoryParams struct {
	PostID     int32 `json:"post_id"`
	CategoryID int32 `json:"category_id"`
}

func (q *Queries) InsertPostCategory(ctx context.Context, arg InsertPostCategoryParams) (PostCategory, error) {
	row := q.db.QueryRow(ctx, insertPostCategory, arg.PostID, arg.CategoryID)
	var i PostCategory
	err := row.Scan(&i.PostID, &i.CategoryID)
	return i, err
}
