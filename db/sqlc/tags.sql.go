// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: tags.sql

package db

import (
	"context"
)

const deleteTag = `-- name: DeleteTag :exec
DELETE FROM tags 
WHERE id = $1
`

func (q *Queries) DeleteTag(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteTag, id)
	return err
}

const getTag = `-- name: GetTag :one
SELECT id, name 
FROM tags 
WHERE id = $1
`

func (q *Queries) GetTag(ctx context.Context, id int32) (Tag, error) {
	row := q.db.QueryRow(ctx, getTag, id)
	var i Tag
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getTags = `-- name: GetTags :many
SELECT id, name 
FROM tags
`

func (q *Queries) GetTags(ctx context.Context) ([]Tag, error) {
	rows, err := q.db.Query(ctx, getTags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tag{}
	for rows.Next() {
		var i Tag
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertTag = `-- name: InsertTag :one
INSERT INTO tags (name) 
VALUES ($1) 
RETURNING id, name
`

func (q *Queries) InsertTag(ctx context.Context, name string) (Tag, error) {
	row := q.db.QueryRow(ctx, insertTag, name)
	var i Tag
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const updateTag = `-- name: UpdateTag :one
UPDATE tags 
SET name = $1
WHERE id = $2
RETURNING id, name
`

type UpdateTagParams struct {
	Name string `json:"name"`
	ID   int32  `json:"id"`
}

func (q *Queries) UpdateTag(ctx context.Context, arg UpdateTagParams) (Tag, error) {
	row := q.db.QueryRow(ctx, updateTag, arg.Name, arg.ID)
	var i Tag
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
