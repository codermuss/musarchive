// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: categories.sql

package db

import (
	"context"
)

const deleteCategory = `-- name: DeleteCategory :exec
DELETE FROM categories 
WHERE id = $1
`

func (q *Queries) DeleteCategory(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteCategory, id)
	return err
}

const getCategory = `-- name: GetCategory :one
SELECT id, name 
FROM categories 
WHERE id = $1
`

func (q *Queries) GetCategory(ctx context.Context, id int32) (Category, error) {
	row := q.db.QueryRow(ctx, getCategory, id)
	var i Category
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const insertCategory = `-- name: InsertCategory :one
INSERT INTO categories (name) 
VALUES ($1) 
RETURNING id, name
`

func (q *Queries) InsertCategory(ctx context.Context, name string) (Category, error) {
	row := q.db.QueryRow(ctx, insertCategory, name)
	var i Category
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const updateCategory = `-- name: UpdateCategory :one
UPDATE categories 
SET name = $1
WHERE id = $2
RETURNING id, name
`

type UpdateCategoryParams struct {
	Name string `json:"name"`
	ID   int32  `json:"id"`
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (Category, error) {
	row := q.db.QueryRow(ctx, updateCategory, arg.Name, arg.ID)
	var i Category
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
