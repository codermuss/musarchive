// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: blog_categories.sql

package db

import (
	"context"
)

const deleteBlogCategory = `-- name: DeleteBlogCategory :exec
DELETE FROM blog_categories 
WHERE blog_id = $1 AND category_id = $2
`

type DeleteBlogCategoryParams struct {
	BlogID     int32 `json:"blog_id"`
	CategoryID int32 `json:"category_id"`
}

func (q *Queries) DeleteBlogCategory(ctx context.Context, arg DeleteBlogCategoryParams) error {
	_, err := q.db.Exec(ctx, deleteBlogCategory, arg.BlogID, arg.CategoryID)
	return err
}

const getCategoriesForBlog = `-- name: GetCategoriesForBlog :many
SELECT c.id, c.name 
FROM categories c
JOIN blog_categories bc ON bc.category_id = c.id
WHERE bc.blog_id = $1
`

func (q *Queries) GetCategoriesForBlog(ctx context.Context, blogID int32) ([]Category, error) {
	rows, err := q.db.Query(ctx, getCategoriesForBlog, blogID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertBlogCategory = `-- name: InsertBlogCategory :one
INSERT INTO blog_categories (blog_id, category_id) 
VALUES ($1, $2)
RETURNING blog_id, category_id
`

type InsertBlogCategoryParams struct {
	BlogID     int32 `json:"blog_id"`
	CategoryID int32 `json:"category_id"`
}

func (q *Queries) InsertBlogCategory(ctx context.Context, arg InsertBlogCategoryParams) (BlogCategory, error) {
	row := q.db.QueryRow(ctx, insertBlogCategory, arg.BlogID, arg.CategoryID)
	var i BlogCategory
	err := row.Scan(&i.BlogID, &i.CategoryID)
	return i, err
}
