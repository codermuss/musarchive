// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: post_tags.sql

package db

import (
	"context"
)

const deletePostTag = `-- name: DeletePostTag :exec
DELETE FROM post_tags 
WHERE post_id = $1 AND tag_id = $2
`

type DeletePostTagParams struct {
	PostID int32 `json:"post_id"`
	TagID  int32 `json:"tag_id"`
}

func (q *Queries) DeletePostTag(ctx context.Context, arg DeletePostTagParams) error {
	_, err := q.db.Exec(ctx, deletePostTag, arg.PostID, arg.TagID)
	return err
}

const getTagsForPost = `-- name: GetTagsForPost :many
SELECT t.id, t.name 
FROM tags t
JOIN post_tags bt ON bt.tag_id = t.id
WHERE bt.post_id = $1
`

func (q *Queries) GetTagsForPost(ctx context.Context, postID int32) ([]Tag, error) {
	rows, err := q.db.Query(ctx, getTagsForPost, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tag{}
	for rows.Next() {
		var i Tag
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertPostTag = `-- name: InsertPostTag :one
INSERT INTO post_tags (post_id, tag_id) 
VALUES ($1, $2)
RETURNING post_id, tag_id
`

type InsertPostTagParams struct {
	PostID int32 `json:"post_id"`
	TagID  int32 `json:"tag_id"`
}

func (q *Queries) InsertPostTag(ctx context.Context, arg InsertPostTagParams) (PostTag, error) {
	row := q.db.QueryRow(ctx, insertPostTag, arg.PostID, arg.TagID)
	var i PostTag
	err := row.Scan(&i.PostID, &i.TagID)
	return i, err
}
