// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user_followers.sql

package db

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteUserFollower = `-- name: DeleteUserFollower :exec
DELETE FROM user_followers 
WHERE user_id = $1 AND follower_id = $2
`

type DeleteUserFollowerParams struct {
	UserID     int32 `json:"user_id"`
	FollowerID int32 `json:"follower_id"`
}

func (q *Queries) DeleteUserFollower(ctx context.Context, arg DeleteUserFollowerParams) error {
	_, err := q.db.Exec(ctx, deleteUserFollower, arg.UserID, arg.FollowerID)
	return err
}

const getFollowersOfUser = `-- name: GetFollowersOfUser :many
SELECT u.id, u.username, u.full_name, u.email, u.avatar, u.birth_date, u.password_changed_at, u.created_at
FROM users u
JOIN user_followers uf ON uf.follower_id = u.id
WHERE uf.user_id = $1
`

type GetFollowersOfUserRow struct {
	ID                int32       `json:"id"`
	Username          string      `json:"username"`
	FullName          string      `json:"full_name"`
	Email             string      `json:"email"`
	Avatar            pgtype.Text `json:"avatar"`
	BirthDate         pgtype.Date `json:"birth_date"`
	PasswordChangedAt time.Time   `json:"password_changed_at"`
	CreatedAt         time.Time   `json:"created_at"`
}

func (q *Queries) GetFollowersOfUser(ctx context.Context, userID int32) ([]GetFollowersOfUserRow, error) {
	rows, err := q.db.Query(ctx, getFollowersOfUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetFollowersOfUserRow{}
	for rows.Next() {
		var i GetFollowersOfUserRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.FullName,
			&i.Email,
			&i.Avatar,
			&i.BirthDate,
			&i.PasswordChangedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFollowingUsers = `-- name: GetFollowingUsers :many
SELECT u.id, u.username, u.full_name, u.email, u.avatar, u.birth_date, u.password_changed_at, u.created_at
FROM users u
JOIN user_followers uf ON uf.user_id = u.id
WHERE uf.follower_id = $1
`

type GetFollowingUsersRow struct {
	ID                int32       `json:"id"`
	Username          string      `json:"username"`
	FullName          string      `json:"full_name"`
	Email             string      `json:"email"`
	Avatar            pgtype.Text `json:"avatar"`
	BirthDate         pgtype.Date `json:"birth_date"`
	PasswordChangedAt time.Time   `json:"password_changed_at"`
	CreatedAt         time.Time   `json:"created_at"`
}

func (q *Queries) GetFollowingUsers(ctx context.Context, followerID int32) ([]GetFollowingUsersRow, error) {
	rows, err := q.db.Query(ctx, getFollowingUsers, followerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetFollowingUsersRow{}
	for rows.Next() {
		var i GetFollowingUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.FullName,
			&i.Email,
			&i.Avatar,
			&i.BirthDate,
			&i.PasswordChangedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertUserFollower = `-- name: InsertUserFollower :one
INSERT INTO user_followers (user_id, follower_id) 
VALUES ($1, $2)
RETURNING user_id, follower_id
`

type InsertUserFollowerParams struct {
	UserID     int32 `json:"user_id"`
	FollowerID int32 `json:"follower_id"`
}

func (q *Queries) InsertUserFollower(ctx context.Context, arg InsertUserFollowerParams) (UserFollower, error) {
	row := q.db.QueryRow(ctx, insertUserFollower, arg.UserID, arg.FollowerID)
	var i UserFollower
	err := row.Scan(&i.UserID, &i.FollowerID)
	return i, err
}
