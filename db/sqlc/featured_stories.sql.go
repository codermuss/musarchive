// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: featured_stories.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteFeaturedStory = `-- name: DeleteFeaturedStory :exec
DELETE FROM featured_stories 
WHERE id = $1
`

func (q *Queries) DeleteFeaturedStory(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteFeaturedStory, id)
	return err
}

const getFeaturedStory = `-- name: GetFeaturedStory :one
SELECT id, post_id, featured_date 
FROM featured_stories 
WHERE id = $1
`

func (q *Queries) GetFeaturedStory(ctx context.Context, id int32) (FeaturedStory, error) {
	row := q.db.QueryRow(ctx, getFeaturedStory, id)
	var i FeaturedStory
	err := row.Scan(&i.ID, &i.PostID, &i.FeaturedDate)
	return i, err
}

const insertFeaturedStory = `-- name: InsertFeaturedStory :one
INSERT INTO featured_stories (post_id, featured_date) 
VALUES ($1, $2) 
RETURNING id, post_id, featured_date
`

type InsertFeaturedStoryParams struct {
	PostID       int32       `json:"post_id"`
	FeaturedDate pgtype.Date `json:"featured_date"`
}

func (q *Queries) InsertFeaturedStory(ctx context.Context, arg InsertFeaturedStoryParams) (FeaturedStory, error) {
	row := q.db.QueryRow(ctx, insertFeaturedStory, arg.PostID, arg.FeaturedDate)
	var i FeaturedStory
	err := row.Scan(&i.ID, &i.PostID, &i.FeaturedDate)
	return i, err
}

const updateFeaturedStory = `-- name: UpdateFeaturedStory :one
UPDATE featured_stories 
SET post_id = $1, featured_date = $2
WHERE id = $3
RETURNING id, post_id, featured_date
`

type UpdateFeaturedStoryParams struct {
	PostID       int32       `json:"post_id"`
	FeaturedDate pgtype.Date `json:"featured_date"`
	ID           int32       `json:"id"`
}

func (q *Queries) UpdateFeaturedStory(ctx context.Context, arg UpdateFeaturedStoryParams) (FeaturedStory, error) {
	row := q.db.QueryRow(ctx, updateFeaturedStory, arg.PostID, arg.FeaturedDate, arg.ID)
	var i FeaturedStory
	err := row.Scan(&i.ID, &i.PostID, &i.FeaturedDate)
	return i, err
}
