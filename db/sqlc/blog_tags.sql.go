// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: blog_tags.sql

package db

import (
	"context"
)

const deleteBlogTag = `-- name: DeleteBlogTag :exec
DELETE FROM blog_tags 
WHERE blog_id = $1 AND tag_id = $2
`

type DeleteBlogTagParams struct {
	BlogID int32 `json:"blog_id"`
	TagID  int32 `json:"tag_id"`
}

func (q *Queries) DeleteBlogTag(ctx context.Context, arg DeleteBlogTagParams) error {
	_, err := q.db.Exec(ctx, deleteBlogTag, arg.BlogID, arg.TagID)
	return err
}

const getTagsForBlog = `-- name: GetTagsForBlog :many
SELECT t.id, t.name 
FROM tags t
JOIN blog_tags bt ON bt.tag_id = t.id
WHERE bt.blog_id = $1
`

func (q *Queries) GetTagsForBlog(ctx context.Context, blogID int32) ([]Tag, error) {
	rows, err := q.db.Query(ctx, getTagsForBlog, blogID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tag{}
	for rows.Next() {
		var i Tag
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertBlogTag = `-- name: InsertBlogTag :one
INSERT INTO blog_tags (blog_id, tag_id) 
VALUES ($1, $2)
RETURNING blog_id, tag_id
`

type InsertBlogTagParams struct {
	BlogID int32 `json:"blog_id"`
	TagID  int32 `json:"tag_id"`
}

func (q *Queries) InsertBlogTag(ctx context.Context, arg InsertBlogTagParams) (BlogTag, error) {
	row := q.db.QueryRow(ctx, insertBlogTag, arg.BlogID, arg.TagID)
	var i BlogTag
	err := row.Scan(&i.BlogID, &i.TagID)
	return i, err
}
