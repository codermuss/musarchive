// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user_posts.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteUserPost = `-- name: DeleteUserPost :exec
DELETE FROM user_posts 
WHERE user_id = $1 AND blog_id = $2
`

type DeleteUserPostParams struct {
	UserID int32 `json:"user_id"`
	BlogID int32 `json:"blog_id"`
}

func (q *Queries) DeleteUserPost(ctx context.Context, arg DeleteUserPostParams) error {
	_, err := q.db.Exec(ctx, deleteUserPost, arg.UserID, arg.BlogID)
	return err
}

const getUserBlog = `-- name: GetUserBlog :one
SELECT b.id, b.title, b.summary, b.content, b.cover_image, b.created_at, b.updated_at, b.likes 
FROM blogs b
JOIN user_posts up ON up.blog_id = b.id
WHERE up.user_id = $1 AND b.id = $2
`

type GetUserBlogParams struct {
	UserID int32 `json:"user_id"`
	ID     int32 `json:"id"`
}

type GetUserBlogRow struct {
	ID         int32              `json:"id"`
	Title      string             `json:"title"`
	Summary    string             `json:"summary"`
	Content    string             `json:"content"`
	CoverImage pgtype.Text        `json:"cover_image"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `json:"updated_at"`
	Likes      pgtype.Int4        `json:"likes"`
}

func (q *Queries) GetUserBlog(ctx context.Context, arg GetUserBlogParams) (GetUserBlogRow, error) {
	row := q.db.QueryRow(ctx, getUserBlog, arg.UserID, arg.ID)
	var i GetUserBlogRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Summary,
		&i.Content,
		&i.CoverImage,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Likes,
	)
	return i, err
}

const getUserBlogs = `-- name: GetUserBlogs :many
SELECT b.id, b.title, b.summary, b.content, b.cover_image, b.created_at, b.updated_at, b.likes 
FROM blogs b
JOIN user_posts up ON up.blog_id = b.id
WHERE up.user_id = $1
`

type GetUserBlogsRow struct {
	ID         int32              `json:"id"`
	Title      string             `json:"title"`
	Summary    string             `json:"summary"`
	Content    string             `json:"content"`
	CoverImage pgtype.Text        `json:"cover_image"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `json:"updated_at"`
	Likes      pgtype.Int4        `json:"likes"`
}

func (q *Queries) GetUserBlogs(ctx context.Context, userID int32) ([]GetUserBlogsRow, error) {
	rows, err := q.db.Query(ctx, getUserBlogs, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUserBlogsRow{}
	for rows.Next() {
		var i GetUserBlogsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Summary,
			&i.Content,
			&i.CoverImage,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Likes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertUserPost = `-- name: InsertUserPost :one
INSERT INTO user_posts (user_id, blog_id) 
VALUES ($1, $2)
RETURNING user_id, blog_id
`

type InsertUserPostParams struct {
	UserID int32 `json:"user_id"`
	BlogID int32 `json:"blog_id"`
}

func (q *Queries) InsertUserPost(ctx context.Context, arg InsertUserPostParams) (UserPost, error) {
	row := q.db.QueryRow(ctx, insertUserPost, arg.UserID, arg.BlogID)
	var i UserPost
	err := row.Scan(&i.UserID, &i.BlogID)
	return i, err
}
